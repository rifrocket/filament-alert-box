name: Release and Publish to Packagist

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Package
    
    strategy:
      matrix:
        php: [8.1, 8.2, 8.3]
        laravel: [10, 11]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
          
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: dependencies-laravel-${{ matrix.laravel }}-php-${{ matrix.php }}-composer-${{ hashFiles('composer.json') }}
          restore-keys: |
            dependencies-laravel-${{ matrix.laravel }}-php-${{ matrix.php }}-composer-
            dependencies-laravel-${{ matrix.laravel }}-php-
            dependencies-laravel-
            
      - name: Install Composer dependencies
        run: |
          composer require "laravel/framework:^${{ matrix.laravel }}.0" --no-interaction --no-update
          composer update --prefer-dist --no-interaction --no-progress
          
      - name: Validate composer.json and composer.lock
        run: composer validate --strict
        
      - name: Check code style (if applicable)
        run: |
          if [ -f "vendor/bin/pint" ]; then
            vendor/bin/pint --test
          elif [ -f "vendor/bin/php-cs-fixer" ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff
          else
            echo "No code style checker found, skipping..."
          fi
          
      - name: Run static analysis (if applicable)
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse
          else
            echo "No static analysis tool found, skipping..."
          fi

  release:
    needs: validate
    runs-on: ubuntu-latest
    name: Create GitHub Release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Extract changelog for this version
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog for current version
            sed -n "/^## \[${{ steps.get_version.outputs.VERSION }}\]/,/^## \[/p" CHANGELOG.md | sed '$d' > current_changelog.md
            # If changelog is empty, create a default one
            if [ ! -s current_changelog.md ]; then
              echo "### Changes" > current_changelog.md
              echo "- Version ${{ steps.get_version.outputs.VERSION }} release" >> current_changelog.md
            fi
          else
            echo "### Changes" > current_changelog.md
            echo "- Version ${{ steps.get_version.outputs.VERSION }} release" >> current_changelog.md
          fi
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          body_path: current_changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  packagist:
    needs: [validate, release]
    runs-on: ubuntu-latest
    name: Update Packagist
    
    steps:
      - name: Notify Packagist
        run: |
          curl -XPOST -H'content-type:application/json' \
            'https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}' \
            -d'{"repository":{"url":"https://github.com/${{ github.repository }}"}}'
            
      - name: Wait for Packagist update
        run: sleep 30
        
      - name: Verify Packagist update
        run: |
          PACKAGE_NAME=$(grep '"name"' composer.json | head -1 | cut -d'"' -f4)
          echo "Checking if package $PACKAGE_NAME was updated on Packagist..."
          
          # Get package info from Packagist
          RESPONSE=$(curl -s "https://packagist.org/packages/$PACKAGE_NAME.json" || echo "")
          
          if echo "$RESPONSE" | grep -q "error"; then
            echo "❌ Package not found on Packagist or error occurred"
            echo "$RESPONSE"
          else
            echo "✅ Package found on Packagist"
            # Extract latest version
            LATEST_VERSION=$(echo "$RESPONSE" | grep -o '"version":"[^"]*"' | head -1 | cut -d'"' -f4)
            echo "Latest version on Packagist: $LATEST_VERSION"
          fi
